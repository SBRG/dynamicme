#============================================================
# File callback_gurobi.py
#
# Gurobi-specific callbacks
#
# Laurence Yang, SBRG, UCSD
#
# 23 Feb 2018:  first version
#============================================================

from six import iteritems
from builtins import range

from gurobipy import *

import numpy as np


def cb_benders(model, where):
    GAPTOL = model._gaptol
    precision_sub = model._precision_sub
    try:
        decomposer = model._decomposer
    except AttributeError:
        print('Need model._decomposer = decomposer')
        raise Exception('Need model._decomposer = decomposer')

    if where in (GRB.Callback.MIPSOL, GRB.Callback.MIPNODE):
        ### Lazy constraints only allowed for MIPNODE or MIPSOL
        ys = decomposer._ys
        z  = decomposer._z
        if where==GRB.Callback.MIPSOL:
            yopt = [model.cbGetSolution(y) for y in ys]
            zmaster = model.cbGetSolution(z)
            if np.nan in yopt:
                print('MIPSOL: nan in yopt!')
        elif where==GRB.Callback.MIPNODE:
            node_status = model.cbGet(GRB.Callback.MIPNODE_STATUS)
            if node_status==GRB.OPTIMAL:
                yopt = [model.cbGetNodeRel(y) for y in ys]
                zmaster = model.cbGetNodeRel(z)
            else:
                if model._verbosity>0:
                    print('non-optimal cbGet(MIPNODE_STATUS)=%g'%node_status)
                return

        decomposer.update_subobj(yopt)
        sub = decomposer.get_sub()
        sub.optimize(precision=precision_sub)

        if sub.Status == GRB.Status.UNBOUNDED:
            # Add feasibility cut, ensuring that cut indeed eliminates current incumbent
            if model._verbosity > 0:
                print('*'*40)
                print('Adding Feasibility cut')

            feascut = decomposer.make_feascut()
            model.cbLazy(feascut)
        else:
            zsub = decomposer.calc_sub_objval(yopt)
            #gap = zmaster - zsub
            gap = zsub - zmaster    # UB - LB
            relgap = gap/(1e-10+abs(zsub))

            if model._verbosity > 1:
                print('#'*40)
                print('zmaster=%g. zsub=%g. gap=%g' % (zmaster, zsub, gap))
                #print('#'*40)

            if relgap > GAPTOL:
                optcut = decomposer.make_optcut()
                model.cbLazy(optcut)

            else:
                # Accept as new incumbent
                pass


def cb_benders_multi(model, where):
    """
    --------------------------------------------------------
    Callback function for multicut Benders.

    ********************************************************
    From Gurobi documentation:
    "Your callback should be prepared to cut off solutions that violate any of your
    lazy constraints,
    >>> including those that have already been added.
    >>> Node solutions will usually respect previously added lazy constraints, but not always."
    ********************************************************

    --------------------------------------------------------
    Definitions

    Incumbent : best integer solution so far
    Fathomed node : node that won't be branched due to one of 3 reasons:
        (i) LP relaxation yields integer feasible solution
        (ii) LP relaxation became infeasible when branching (also integer infeasible)
        (iii) LP relaxation solution is worse than incumbent
    Nodes : a pair of MIPs generated by branching on a fractional variable xj<=a, xj>=b
    Root node : original MIP
    Leaf : unbranched node
    Best bound : minimum of all current leaf node objective values
    """
    try:
        master = model._master
    except AttributeError:
        print('Need model._master = master')
        raise Exception('Need model._master = master')

    GAPTOL = master.gaptol
    precision_sub = master.precision_sub
    print_iter = master.print_iter  # print per print_iter iters
    verbosity = master.verbosity
    UB = 1e15
    LB = 1e-15

    if verbosity > 2:
        print('*'*40)
        print('In callback with where: %s'%where)

    if where==GRB.Callback.MIP:
        if verbosity > 0:
            _iter = model.cbGet(GRB.Callback.MIP_ITRCNT)
            if np.mod(_iter,print_iter)==0:
                UB = master.UB
                LB = master.LB
                # Could also use MIP_OBJBND
                OBJBND = model.cbGet(GRB.Callback.MIP_OBJBND)
                gap = UB - LB
                relgap = gap / (1e-10 + abs(UB))
                nfeas = len(master.feascuts)
                nopt = len(master.optcuts)
                print(
                    'Best UB=%g. Best LB=%g (MIP_OBJBND=%g). Gap=%g. Relgap=%g%%. nFeasCut=%d. nOptCut=%d'%(
                    UB,LB,OBJBND,gap,relgap*100,nfeas,nopt))

    elif where in (GRB.Callback.MIPSOL, GRB.Callback.MIPNODE):
    #elif where == GRB.Callback.MIPSOL:
        ### Lazy constraints only allowed for MIPNODE or MIPSOL
        #****************************************************
        # Only add Benders cut to exclude new incumbent?
        # Doesn't improve lower bound then, which is problematic.
        #****************************************************
        # In general, use lazy constraint to exclude incumebt (MIPSOL)
        # or to fathom node (MIPNODE) by rendering it infeasible with cut.
        # Note the solution in MIPNODE is the LP relaxation with potential
        # fractional values, and MIPSOL is the best integer solution.
        fy = master._fy
        ys = master._ys
        z  = master._z
        if where==GRB.Callback.MIPSOL:
            yopt = [model.cbGetSolution(y) for y in ys]
            zmaster = model.cbGetSolution(z)
        elif where==GRB.Callback.MIPNODE:
            node_status = model.cbGet(GRB.Callback.MIPNODE_STATUS)
            if node_status==GRB.OPTIMAL:
                yopt = [model.cbGetNodeRel(y) for y in ys]
                # potentially fractional relaxation
                zmaster = model.cbGetNodeRel(z)
            else:
                # Then node will get fathomed anyway since infeasible
                return

        sub_dict = master.sub_dict
        sub_objs = []
        opt_sub_inds = []

        # Solve submodels, collect objs, and calculate UB
        for sub_ind, sub in iteritems(sub_dict):
            sub.update_obj(yopt)
            sub.model.optimize(precision=precision_sub)
            if verbosity>1:
                print('Submodel %s status = %s'%(sub_ind, sub.model.Status))

            if sub.model.Status == GRB.Status.UNBOUNDED:
                # Add feasibility cut, ensuring that cut indeed elimi current incumbent
                # If even one submodel infeasible, original problem infeasible.
                feascut = master.make_feascut(sub)
                master.feascuts.add(feascut)
                model.cbLazy(feascut)   # Add to lazy constraint pool 
            else:
                sub_obj = sub._weight*sub.model.ObjVal
                sub_objs.append(sub_obj)
                opt_sub_inds.append(sub_ind)

        # "Node solutions will usually respect previously added lazy constraints, but not always."
        # Add back all feascut, including previous ones that may have been dropped
        # for cut in master.feascuts:
        #     ### TODO: only add violated cuts
        #     model.cbLazy(cut)

        #----------------------------------------------------
        # Get LB and UB for this node
        LB = zmaster
        UB = sum(fy*yopt) + sum(sub_objs)

        # Update global bounds
        # Note: global LB is minimum of all leaf nodes
        if where==GRB.Callback.MIPSOL:
            # If incumbent, save as UB.
            # However, cuts may exclude it in next iteration.
            if UB<master.UB:
                master.UB = UB

            LB_best = model.cbGet(GRB.Callback.MIPSOL_OBJBND)
            master.LB = LB_best
        elif where==GRB.Callback.MIPNODE:
            LB_best = model.cbGet(GRB.Callback.MIPNODE_OBJBND)

        # Check gap for this node
        gap = UB - LB
        relgap = gap / (1e-10 + abs(UB))

        if relgap > GAPTOL:
            for sub_ind in opt_sub_inds:
                sub = sub_dict[sub_ind]
                optcut = master.make_optcut(sub)
                master.optcuts.add(optcut)
                model.cbLazy(optcut)    # Add to lazy constraint pool

            # "Node solutions will usually respect previously added lazy constraints,
            # but not always."
            # Add back all the optcuts
            for cut in master.optcuts:
                ### TODO: only add violated
                # Violated?
                # If so, add again to pool
                model.cbLazy(cut)
        else:
            # Accept as new incumbent (MIPSOL) or keep exploring node (MIPNODE)
            pass
